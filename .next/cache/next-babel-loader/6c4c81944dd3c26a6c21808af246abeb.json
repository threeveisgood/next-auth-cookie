{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport Router from \"next/router\";\nimport axios from \"axios\";\naxios.defaults.withCredentials = true;\nvar WINDOW_USER_SCRIPT_VARIABLE = \"__USER__\";\nexport var getUserScript = function getUserScript(user) {\n  return \"\".concat(WINDOW_USER_SCRIPT_VARIABLE, \" = \").concat(_JSON$stringify(user), \";\");\n};\nexport var getServerSideToken = function getServerSideToken(req) {\n  var _req$signedCookies = req.signedCookies,\n      signedCookies = _req$signedCookies === void 0 ? {} : _req$signedCookies;\n\n  if (!signedCookies) {\n    return {};\n  } else if (!signedCookies.token) {\n    return {};\n  }\n\n  return {\n    user: signedCookies.token\n  };\n};\nexport var getClientSideToken = function getClientSideToken() {\n  if (true) {\n    var user = window[WINDOW_USER_SCRIPT_VARIABLE] || {};\n    return {\n      user: user\n    };\n  }\n\n  return {\n    user: {}\n  };\n};\n\nvar redirectUser = function redirectUser(res, path) {\n  if (res) {\n    // can specify it as a 302 (temporary instead of a 301 redirect)\n    res.redirect(302, path); // res.finished is a next.js construct only, that tells next.js you have handled the entire request/response lifecycle in getInitialProps, so that it knows not to continue writing to the response.\n\n    res.finished = true;\n    return {};\n  } // if no response, redirect on the client with Next's router\n\n\n  Router.replace(path);\n  return {};\n};\n\nexport var authInitialProps = function authInitialProps(isProtectedRoute) {\n  return function (_ref) {\n    var req = _ref.req,\n        res = _ref.res;\n    var auth = req ? getServerSideToken(req) : getClientSideToken();\n    var currentPath = req ? req.url : window.location.pathname;\n    var user = auth.user;\n    var isAnonymous = !user || user.type !== \"authenticated\";\n\n    if (isProtectedRoute && isAnonymous && currentPath !== \"/login\") {\n      return redirectUser(res, \"/login\");\n    }\n\n    return {\n      auth: auth\n    };\n  };\n};\nexport var getUserProfile = function getUserProfile() {\n  var _ref2, data;\n\n  return _regeneratorRuntime.async(function getUserProfile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get(\"/api/profile\"));\n\n        case 2:\n          _ref2 = _context.sent;\n          data = _ref2.data;\n          return _context.abrupt(\"return\", data);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var loginUser = function loginUser(_ref3) {\n  var email, password, _ref4, data;\n\n  return _regeneratorRuntime.async(function loginUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          email = _ref3.email, password = _ref3.password;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(axios.post(\"/api/login\", {\n            email: email,\n            password: password\n          }));\n\n        case 3:\n          _ref4 = _context2.sent;\n          data = _ref4.data;\n\n          if (true) {\n            window[WINDOW_USER_SCRIPT_VARIABLE] = data || {};\n          }\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n};\nexport var logoutUser = function logoutUser() {\n  return _regeneratorRuntime.async(function logoutUser$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (true) {\n            window[WINDOW_USER_SCRIPT_VARIABLE] = {};\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(axios.post(\"/api/logout\"));\n\n        case 3:\n          Router.push(\"/login\");\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["E:/Coding/next-cookie-auth/lib/auth.js"],"names":["Router","axios","defaults","withCredentials","WINDOW_USER_SCRIPT_VARIABLE","getUserScript","user","getServerSideToken","req","signedCookies","token","getClientSideToken","window","redirectUser","res","path","redirect","finished","replace","authInitialProps","isProtectedRoute","auth","currentPath","url","location","pathname","isAnonymous","type","getUserProfile","get","data","loginUser","email","password","post","logoutUser","push"],"mappings":"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","sourcesContent":["import Router from \"next/router\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.withCredentials = true;\r\n\r\nconst WINDOW_USER_SCRIPT_VARIABLE = `__USER__`;\r\n\r\nexport const getUserScript = user => {\r\n  return `${WINDOW_USER_SCRIPT_VARIABLE} = ${JSON.stringify(user)};`;\r\n};\r\n\r\nexport const getServerSideToken = req => {\r\n  const { signedCookies = {} } = req;\r\n\r\n  if (!signedCookies) {\r\n    return {};\r\n  } else if (!signedCookies.token) {\r\n    return {};\r\n  }\r\n  return { user: signedCookies.token };\r\n};\r\n\r\nexport const getClientSideToken = () => {\r\n  if (typeof window !== \"undefined\") {\r\n    const user = window[WINDOW_USER_SCRIPT_VARIABLE] || {};\r\n    return { user };\r\n  }\r\n  return { user: {} };\r\n};\r\n\r\nconst redirectUser = (res, path) => {\r\n  if (res) {\r\n    // can specify it as a 302 (temporary instead of a 301 redirect)\r\n    res.redirect(302, path);\r\n    // res.finished is a next.js construct only, that tells next.js you have handled the entire request/response lifecycle in getInitialProps, so that it knows not to continue writing to the response.\r\n    res.finished = true;\r\n    return {};\r\n  }\r\n  // if no response, redirect on the client with Next's router\r\n  Router.replace(path);\r\n  return {};\r\n};\r\n\r\nexport const authInitialProps = isProtectedRoute => ({ req, res }) => {\r\n  const auth = req ? getServerSideToken(req) : getClientSideToken();\r\n  const currentPath = req ? req.url : window.location.pathname;\r\n  const user = auth.user;\r\n  const isAnonymous = !user || user.type !== \"authenticated\";\r\n  if (isProtectedRoute && isAnonymous && currentPath !== \"/login\") {\r\n    return redirectUser(res, \"/login\");\r\n  }\r\n  return { auth };\r\n};\r\n\r\nexport const getUserProfile = async () => {\r\n  const { data } = await axios.get(\"/api/profile\");\r\n  return data;\r\n};\r\n\r\nexport const loginUser = async ({ email, password }) => {\r\n  const { data } = await axios.post(\"/api/login\", { email, password });\r\n  if (typeof window !== \"undefined\") {\r\n    window[WINDOW_USER_SCRIPT_VARIABLE] = data || {};\r\n  }\r\n};\r\n\r\nexport const logoutUser = async () => {\r\n  if (typeof window !== \"undefined\") {\r\n    window[WINDOW_USER_SCRIPT_VARIABLE] = {};\r\n  }\r\n  await axios.post(\"/api/logout\");\r\n  Router.push(\"/login\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}