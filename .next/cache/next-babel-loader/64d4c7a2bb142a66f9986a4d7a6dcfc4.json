{"ast":null,"code":"import Router from \"next/router\";\nimport axios from \"axios\";\naxios.defaults.withCredentials = true;\nconst WINDOW_USER_SCRIPT_VARIABLE = `__USER__`;\nexport const getUserScript = user => {\n  return `${WINDOW_USER_SCRIPT_VARIABLE} = ${JSON.stringify(user)};`;\n};\nexport const getServerSideToken = req => {\n  const {\n    signedCookies = {}\n  } = req;\n\n  if (!signedCookies) {\n    return {};\n  } else if (!signedCookies.token) {\n    return {};\n  }\n\n  return {\n    user: signedCookies.token\n  };\n};\nexport const getClientSideToken = () => {\n  if (false) {\n    const user = window[WINDOW_USER_SCRIPT_VARIABLE] || {};\n    return {\n      user\n    };\n  }\n\n  return {\n    user: {}\n  };\n};\n\nconst redirectUser = (res, path) => {\n  if (res) {\n    // can specify it as a 302 (temporary instead of a 301 redirect)\n    res.redirect(302, path); // res.finished is a next.js construct only, that tells next.js you have handled the entire request/response lifecycle in getInitialProps, so that it knows not to continue writing to the response.\n\n    res.finished = true;\n    return {};\n  } // if no response, redirect on the client with Next's router\n\n\n  Router.replace(path);\n  return {};\n};\n\nexport const authInitialProps = isProtectedRoute => ({\n  req,\n  res\n}) => {\n  const auth = req ? getServerSideToken(req) : getClientSideToken();\n  const currentPath = req ? req.url : window.location.pathname;\n  const user = auth.user;\n  const isAnonymous = !user || user.type !== \"authenticated\";\n\n  if (isProtectedRoute && isAnonymous && currentPath !== \"/login\") {\n    return redirectUser(res, \"/login\");\n  }\n\n  return {\n    auth\n  };\n};\nexport const getUserProfile = async () => {\n  const {\n    data\n  } = await axios.get(\"/api/profile\");\n  return data;\n};\nexport const loginUser = async ({\n  email,\n  password\n}) => {\n  const {\n    data\n  } = await axios.post(\"/api/login\", {\n    email,\n    password\n  });\n\n  if (false) {\n    window[WINDOW_USER_SCRIPT_VARIABLE] = data || {};\n  }\n};\nexport const logoutUser = async () => {\n  if (false) {\n    window[WINDOW_USER_SCRIPT_VARIABLE] = {};\n  }\n\n  await axios.post(\"/api/logout\");\n  Router.push(\"/login\");\n};","map":{"version":3,"sources":["E:/Coding/next-cookie-auth/lib/auth.js"],"names":["Router","axios","defaults","withCredentials","WINDOW_USER_SCRIPT_VARIABLE","getUserScript","user","JSON","stringify","getServerSideToken","req","signedCookies","token","getClientSideToken","window","redirectUser","res","path","redirect","finished","replace","authInitialProps","isProtectedRoute","auth","currentPath","url","location","pathname","isAnonymous","type","getUserProfile","data","get","loginUser","email","password","post","logoutUser","push"],"mappings":"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","sourcesContent":["import Router from \"next/router\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.withCredentials = true;\r\n\r\nconst WINDOW_USER_SCRIPT_VARIABLE = `__USER__`;\r\n\r\nexport const getUserScript = user => {\r\n  return `${WINDOW_USER_SCRIPT_VARIABLE} = ${JSON.stringify(user)};`;\r\n};\r\n\r\nexport const getServerSideToken = req => {\r\n  const { signedCookies = {} } = req;\r\n\r\n  if (!signedCookies) {\r\n    return {};\r\n  } else if (!signedCookies.token) {\r\n    return {};\r\n  }\r\n  return { user: signedCookies.token };\r\n};\r\n\r\nexport const getClientSideToken = () => {\r\n  if (typeof window !== \"undefined\") {\r\n    const user = window[WINDOW_USER_SCRIPT_VARIABLE] || {};\r\n    return { user };\r\n  }\r\n  return { user: {} };\r\n};\r\n\r\nconst redirectUser = (res, path) => {\r\n  if (res) {\r\n    // can specify it as a 302 (temporary instead of a 301 redirect)\r\n    res.redirect(302, path);\r\n    // res.finished is a next.js construct only, that tells next.js you have handled the entire request/response lifecycle in getInitialProps, so that it knows not to continue writing to the response.\r\n    res.finished = true;\r\n    return {};\r\n  }\r\n  // if no response, redirect on the client with Next's router\r\n  Router.replace(path);\r\n  return {};\r\n};\r\n\r\nexport const authInitialProps = isProtectedRoute => ({ req, res }) => {\r\n  const auth = req ? getServerSideToken(req) : getClientSideToken();\r\n  const currentPath = req ? req.url : window.location.pathname;\r\n  const user = auth.user;\r\n  const isAnonymous = !user || user.type !== \"authenticated\";\r\n  if (isProtectedRoute && isAnonymous && currentPath !== \"/login\") {\r\n    return redirectUser(res, \"/login\");\r\n  }\r\n  return { auth };\r\n};\r\n\r\nexport const getUserProfile = async () => {\r\n  const { data } = await axios.get(\"/api/profile\");\r\n  return data;\r\n};\r\n\r\nexport const loginUser = async ({ email, password }) => {\r\n  const { data } = await axios.post(\"/api/login\", { email, password });\r\n  if (typeof window !== \"undefined\") {\r\n    window[WINDOW_USER_SCRIPT_VARIABLE] = data || {};\r\n  }\r\n};\r\n\r\nexport const logoutUser = async () => {\r\n  if (typeof window !== \"undefined\") {\r\n    window[WINDOW_USER_SCRIPT_VARIABLE] = {};\r\n  }\r\n  await axios.post(\"/api/logout\");\r\n  Router.push(\"/login\");\r\n};\r\n"]},"metadata":{},"sourceType":"module"}